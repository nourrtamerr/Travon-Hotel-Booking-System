// <auto-generated />
using System;
using MVCBookingFinal_YARAB_.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVCBookingFinal_YARAB_.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250307201034_lastt")]
    partial class lastt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amenities")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amenities = 98
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1df116c7-7398-4c18-8139-42623085e053",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "Password123!",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Image = "393793e4-337e-4d43-8e2e-54093aa8bc34.png",
                            Name = "GIZA",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "393793e4-337e-4d43-8e2e-54093aa8bc34.png",
                            Name = "Egypt",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.DraftReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsedPromoCodeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("amenity")
                        .HasColumnType("int");

                    b.Property<int?>("mealPlan")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsedPromoCodeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DraftReservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheckInDate = new DateTime(2025, 3, 7, 22, 10, 33, 610, DateTimeKind.Local).AddTicks(2444),
                            CheckOutDate = new DateTime(2025, 3, 12, 22, 10, 33, 610, DateTimeKind.Local).AddTicks(2451),
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HotelId = 1,
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Hotel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AmenetiesId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("starRating")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("AmenetiesId");

                    b.HasIndex("CityId");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Address = "125 GIZA",
                            AmenetiesId = 1,
                            CityId = 1,
                            Description = "big hotel",
                            Email = "placahotel@gmail.com",
                            Latitude = "0",
                            Longitude = "0",
                            Name = "PlazaHotel",
                            PhoneNumber = "01143874387",
                            isDeleted = false,
                            starRating = 4
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.HotelImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelsImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HotelId = 1,
                            Image = "393793e4-337e-4d43-8e2e-54093aa8bc34.png",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PaymentId = 1,
                            ReservationId = 1,
                            Tax = 10.0,
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.MealPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("plan")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MealPlans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            plan = 0
                        },
                        new
                        {
                            Id = 2,
                            plan = 1
                        },
                        new
                        {
                            Id = 3,
                            plan = 2
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PaymentDate = new DateTime(2025, 3, 7, 22, 10, 33, 611, DateTimeKind.Local).AddTicks(851),
                            PaymentMethodId = 25,
                            TransactionId = "sadiaosd",
                            status = "Confirmed"
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");

                    b.HasDiscriminator().HasValue("PaymentMethod");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.PromoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddingUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("AddingUserID");

                    b.ToTable("PromoCodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddingUserID = "1",
                            Code = "ANMMM",
                            Discount = 20.0,
                            ExpiryDate = new DateTime(2025, 3, 12, 22, 10, 33, 611, DateTimeKind.Local).AddTicks(2626),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Complaint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Complaint = "bad food",
                            HotelId = 1,
                            ReviewDate = new DateTime(2025, 3, 7, 22, 10, 33, 611, DateTimeKind.Local).AddTicks(4363),
                            UserId = "1",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("mealPlanId")
                        .HasColumnType("int");

                    b.Property<int>("reservationStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("AmenityId");

                    b.HasIndex("mealPlanId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmenityId = 1,
                            CheckInDate = new DateTime(2025, 3, 7, 22, 10, 33, 611, DateTimeKind.Local).AddTicks(6095),
                            CheckOutDate = new DateTime(2025, 3, 12, 22, 10, 33, 611, DateTimeKind.Local).AddTicks(6099),
                            mealPlanId = 1,
                            reservationStatus = 1
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.ReservationRoom", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("ReservationId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("ReservationRooms");

                    b.HasData(
                        new
                        {
                            id = 1,
                            IsDeleted = false,
                            ReservationId = 1,
                            RoomId = 1,
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "thank you for the hotel",
                            HotelId = 1,
                            Rating = 5,
                            ReviewDate = new DateTime(2025, 3, 7, 22, 10, 33, 611, DateTimeKind.Local).AddTicks(9501),
                            UserId = "1",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DraftReservationId")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<double>("PricePerNight")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("roomType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DraftReservationId");

                    b.HasIndex("HotelId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Floor = 2,
                            HotelId = 1,
                            PricePerNight = 5000.0,
                            Status = 0,
                            roomType = 0
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.RoomImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("roomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("roomId");

                    b.ToTable("RoomsImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "393793e4-337e-4d43-8e2e-54093aa8bc34.png",
                            isDeleted = false,
                            roomId = 1
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.UsedPromoCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PromoCodeId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PromoCodeId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("UserId");

                    b.ToTable("UsedPromoCodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PromoCodeId = 1,
                            ReservationId = 1,
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.ViewModels.RegisterViewModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("ConfirmEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("RegisterViewModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1d109be1-7c25-4f22-91d7-6e8aa3c60c3e",
                            ConcurrencyStamp = "1d109be1-7c25-4f22-91d7-6e8aa3c60c3e",
                            Name = "USER",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "2e209de2-8d45-4f33-92f8-7f9bb4d70d4f",
                            ConcurrencyStamp = "2e209de2-8d45-4f33-92f8-7f9bb4d70d4f",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.CardPaymentMethod", b =>
                {
                    b.HasBaseType("MVCBookingFinal_YARAB_.Models.PaymentMethod");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.HasDiscriminator().HasValue("CardPaymentMethod");

                    b.HasData(
                        new
                        {
                            Id = 25,
                            PaymentType = 1,
                            CVV = "332",
                            CardNumber = "5151515",
                            ExpiryDate = new DateOnly(2028, 3, 7)
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.StripePaymentMethod", b =>
                {
                    b.HasBaseType("MVCBookingFinal_YARAB_.Models.PaymentMethod");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("StripePaymentMethod");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            PaymentType = 0,
                            AccountNumber = "5151515"
                        });
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.City", b =>
                {
                    b.HasOne("MVCBookingFinal_YARAB_.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.DraftReservation", b =>
                {
                    b.HasOne("MVCBookingFinal_YARAB_.Models.UsedPromoCodes", "UsedPromoCode")
                        .WithMany()
                        .HasForeignKey("UsedPromoCodeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MVCBookingFinal_YARAB_.Models.AppUser", "User")
                        .WithOne("SavedDraft")
                        .HasForeignKey("MVCBookingFinal_YARAB_.Models.DraftReservation", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UsedPromoCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Favorite", b =>
                {
                    b.HasOne("MVCBookingFinal_YARAB_.Models.Hotel", "Hotel")
                        .WithMany("Favorites")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MVCBookingFinal_YARAB_.Models.AppUser", "User")
                        .WithMany("FavoriteHotels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Hotel", b =>
                {
                    b.HasOne("MVCBookingFinal_YARAB_.Models.Amenity", "Ameneties")
                        .WithMany("Hotels")
                        .HasForeignKey("AmenetiesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MVCBookingFinal_YARAB_.Models.City", "city")
                        .WithMany("Hotels")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Ameneties");

                    b.Navigation("city");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.HotelImage", b =>
                {
                    b.HasOne("MVCBookingFinal_YARAB_.Models.Hotel", "hotel")
                        .WithMany("Images")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("hotel");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Invoice", b =>
                {
                    b.HasOne("MVCBookingFinal_YARAB_.Models.Payment", "Payment")
                        .WithOne("invoice")
                        .HasForeignKey("MVCBookingFinal_YARAB_.Models.Invoice", "PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MVCBookingFinal_YARAB_.Models.Reservation", "Reservation")
                        .WithOne("Invoice")
                        .HasForeignKey("MVCBookingFinal_YARAB_.Models.Invoice", "ReservationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Payment", b =>
                {
                    b.HasOne("MVCBookingFinal_YARAB_.Models.PaymentMethod", "payment")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("payment");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.PromoCode", b =>
                {
                    b.HasOne("MVCBookingFinal_YARAB_.Models.AppUser", "AddingUser")
                        .WithMany()
                        .HasForeignKey("AddingUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AddingUser");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Report", b =>
                {
                    b.HasOne("MVCBookingFinal_YARAB_.Models.Hotel", "Hotel")
                        .WithMany("Reported")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MVCBookingFinal_YARAB_.Models.AppUser", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Reservation", b =>
                {
                    b.HasOne("MVCBookingFinal_YARAB_.Models.Amenity", "amenity")
                        .WithMany("Reservation")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MVCBookingFinal_YARAB_.Models.MealPlan", "mealPlan")
                        .WithMany("Reservations")
                        .HasForeignKey("mealPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("amenity");

                    b.Navigation("mealPlan");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.ReservationRoom", b =>
                {
                    b.HasOne("MVCBookingFinal_YARAB_.Models.Reservation", "Reservation")
                        .WithMany("Reserved")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MVCBookingFinal_YARAB_.Models.Room", "Room")
                        .WithMany("Reserved")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MVCBookingFinal_YARAB_.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Review", b =>
                {
                    b.HasOne("MVCBookingFinal_YARAB_.Models.Hotel", "Hotel")
                        .WithMany("Reviewed")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MVCBookingFinal_YARAB_.Models.AppUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Room", b =>
                {
                    b.HasOne("MVCBookingFinal_YARAB_.Models.DraftReservation", null)
                        .WithMany("Reserved")
                        .HasForeignKey("DraftReservationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MVCBookingFinal_YARAB_.Models.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.RoomImage", b =>
                {
                    b.HasOne("MVCBookingFinal_YARAB_.Models.Room", "room")
                        .WithMany("Images")
                        .HasForeignKey("roomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("room");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.UsedPromoCodes", b =>
                {
                    b.HasOne("MVCBookingFinal_YARAB_.Models.PromoCode", "PromoCode")
                        .WithMany("UsedTimes")
                        .HasForeignKey("PromoCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MVCBookingFinal_YARAB_.Models.Reservation", "Reservation")
                        .WithMany("UsedPromoCodes")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MVCBookingFinal_YARAB_.Models.AppUser", "User")
                        .WithMany("UsedPromoCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PromoCode");

                    b.Navigation("Reservation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MVCBookingFinal_YARAB_.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MVCBookingFinal_YARAB_.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVCBookingFinal_YARAB_.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MVCBookingFinal_YARAB_.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Amenity", b =>
                {
                    b.Navigation("Hotels");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.AppUser", b =>
                {
                    b.Navigation("FavoriteHotels");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");

                    b.Navigation("SavedDraft");

                    b.Navigation("UsedPromoCodes");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.City", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.DraftReservation", b =>
                {
                    b.Navigation("Reserved");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Hotel", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Images");

                    b.Navigation("Reported");

                    b.Navigation("Reviewed");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.MealPlan", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Payment", b =>
                {
                    b.Navigation("invoice")
                        .IsRequired();
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.PromoCode", b =>
                {
                    b.Navigation("UsedTimes");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Reservation", b =>
                {
                    b.Navigation("Invoice")
                        .IsRequired();

                    b.Navigation("Reserved");

                    b.Navigation("UsedPromoCodes");
                });

            modelBuilder.Entity("MVCBookingFinal_YARAB_.Models.Room", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Reserved");
                });
#pragma warning restore 612, 618
        }
    }
}
